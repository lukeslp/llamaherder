[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "herd-ai"
version = "0.1.0"
description = "AI-powered tool management and orchestration system"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Luke Steuber", email = "luke@lukesteuber.com"}
]
maintainers = [
    {name = "Luke Steuber", email = "luke@lukesteuber.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Artificial Intelligence",
]
keywords = ["ai", "tools", "automation", "llm", "assistant"]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.25.0",
    "click>=8.0.0",
    "pydantic>=1.8.0",
    "python-dotenv>=0.19.0",
    "rich>=10.0.0",
    "typer>=0.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
    "semgrep>=1.0.0",
]
gui = [
    "customtkinter>=5.0.0",
    "flask>=3.0.0",
    "flask-socketio>=5.3.0",
    "markdown>=3.0.0",
    "reportlab>=4.0.0",
]
ai = [
    "anthropic>=0.3.0",
    "openai>=1.0.0",
    "google-generativeai>=0.8.0",
]
image = [
    "pillow>=8.0.0",
]
system = [
    "psutil>=5.9.0",
    "pyperclip>=1.8.0",
]
citations = [
    "bibtexparser>=1.4.0",
    "beautifulsoup4>=4.12.0",
]
all = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=22.0",
    "isort>=5.0",
    "flake8>=4.0",
    "mypy>=0.900",
    "pre-commit>=2.15.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
    "semgrep>=1.0.0",
    "customtkinter>=5.0.0",
    "flask>=3.0.0",
    "flask-socketio>=5.3.0",
    "markdown>=3.0.0",
    "reportlab>=4.0.0",
    "anthropic>=0.3.0",
    "openai>=1.0.0",
    "google-generativeai>=0.8.0",
    "pillow>=8.0.0",
    "psutil>=5.9.0",
    "pyperclip>=1.8.0",
    "bibtexparser>=1.4.0",
    "beautifulsoup4>=4.12.0",
]

[project.urls]
Homepage = "https://github.com/lukeslp/llamaherder"
Documentation = "https://github.com/lukeslp/llamaherder#readme"
Repository = "https://github.com/lukeslp/llamaherder"
"Bug Tracker" = "https://github.com/lukeslp/llamaherder/issues"

[project.scripts]
herd = "herd_ai.cli:main"
herd-gui = "herd_ai.gui:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["herd_ai"]
skip_glob = ["*/migrations/*"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "customtkinter.*",
    "tkinter.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"] 